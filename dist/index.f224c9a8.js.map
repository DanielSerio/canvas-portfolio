{"mappings":"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","sources":["src/lib/utils/create-element.ts","src/lib/Project/Colors.ts","src/lib/Project/Project.ts","src/lib/utils/rand-string.ts","src/lib/Project/StaticProject.ts","src/site/projects/ArtGenerator/Shape.ts","src/site/projects/ArtGenerator/RoundShape.ts","src/site/projects/ArtGenerator/Circle.ts","src/site/projects/ArtGenerator/Ellipse.ts","src/site/projects/ArtGenerator/RectShape.ts","src/site/projects/ArtGenerator/Rect.ts","src/site/projects/ArtGenerator/Square.ts","src/site/projects/BasicMaze.ts","src/lib/Project/AnimProject.ts","src/site/projects/Carbination.ts","src/lib/Project/EventProject.ts","src/site/projects/ObjectVelocity.ts","src/site/projects/PolarSeparation.ts","src/site/projects/Worm.ts","src/site/projects/index.ts","src/site/projects/GOL.ts","src/site/projects/LineMap.ts","src/site/projects/ArtGenerator/index.ts","src/site/index.ts","src/lib/Application/index.ts"],"sourcesContent":["interface CreateElementOptions {\r\n  className?: string|string[]\r\n  id?: string\r\n  data?: { [key: string]: string }\r\n}\r\n\r\nexport function createElement (tag: keyof HTMLElementTagNameMap, options?: CreateElementOptions) {\r\n  const el = document.createElement(tag)\r\n  if (options) {\r\n    const { className, id, data } = options\r\n    if (data) Object.assign(el.dataset, data)\r\n    if (id) el.id = id\r\n    if (className) {\r\n      if (typeof className === 'string') el.classList.add(className)\r\n      else el.classList.add(...className)\r\n    }\r\n  }\r\n\r\n  return el\r\n}\r\n","export default class Colors {\r\n  [key: string]: string\r\n  public baseBlack: string = '#191c24'\r\n  public grey25: string = '#3d4343'\r\n  public grey50: string = '#827f7d'\r\n  public grey75: string = '#bec1c1'\r\n  public green: string = '#00b8b5'\r\n  public baseWhite: string = '#f1efee'\r\n  public purple: string = '#7467cb'\r\n\r\n  public get random (): string {\r\n    const colors: string[] = [\r\n      this.green,\r\n      this.purple\r\n    ]\r\n\r\n    return colors[Math.round(Math.random())]\r\n  }\r\n}\r\n","import { createElement, randString } from '../utils'\r\nimport Colors from './Colors'\r\n\r\nexport type Context = CanvasRenderingContext2D\r\n\r\nexport enum ProjectType {\r\n  STATIC = 'static',\r\n  ANIM = 'animated',\r\n  EVENT = 'event-driven'\r\n}\r\n\r\nexport interface ProjectReqParams {\r\n  name: string\r\n  desc: string\r\n}\r\n\r\nexport interface ProjectOptionalParams {\r\n  size?: number\r\n}\r\n\r\nexport interface ProjectAttrs {\r\n  id: string\r\n  canvas: HTMLCanvasElement\r\n  ctx: Context\r\n  type: ProjectType\r\n  thumbBackgroundURL: string\r\n  thumbNameSpan: HTMLSpanElement\r\n  descPara: HTMLParagraphElement\r\n  nameHeading: HTMLHeadingElement\r\n  thumbnailLi: HTMLLIElement\r\n  getPresentationElement: (onClose: () => void, onRefresh?: () => void) => void\r\n\r\n  render: () => void\r\n}\r\n\r\nexport type ProjectOptions = ProjectReqParams & ProjectOptionalParams\r\nexport type ProjectParams = ProjectOptions & ProjectAttrs\r\n\r\nexport abstract class Project implements ProjectParams {\r\n  public id: string = randString()\r\n  public colors: Colors = new Colors()\r\n  public canvas: HTMLCanvasElement = createElement('canvas', { className: 'canvas', id: this.id }) as HTMLCanvasElement\r\n  public ctx: Context = this.canvas.getContext('2d') as Context\r\n  public type!: ProjectType\r\n  public size: number = 300\r\n  public name!: string\r\n  public desc!: string\r\n  public thumbNameSpan!: HTMLSpanElement\r\n  public descPara!: HTMLParagraphElement\r\n  public nameHeading!: HTMLHeadingElement\r\n\r\n  constructor (options: ProjectOptions) {\r\n    Object.assign(this, options)\r\n    this.resize()\r\n    this.thumbNameSpan = this.createThumbNameSpan()\r\n    this.descPara = this.createDescPara()\r\n    this.nameHeading = this.createNameHeading()\r\n    this.render()\r\n  }\r\n\r\n  private createThumbNameSpan = (): HTMLSpanElement => {\r\n    const span = createElement('span', { className: 'name', data: { id: this.id } })\r\n    span.innerText = this.name\r\n\r\n    return span as HTMLSpanElement\r\n  }\r\n\r\n  private createNameHeading = (): HTMLHeadingElement => {\r\n    const title = createElement('h2', { className: 'title' })\r\n    title.innerText = this.name\r\n    return title as HTMLHeadingElement\r\n  }\r\n\r\n  private createDescPara = (): HTMLParagraphElement => {\r\n    const p = createElement('p', { className: 'desc' }) as HTMLParagraphElement\r\n    p.innerText = this.desc\r\n    return p\r\n  }\r\n\r\n  protected save = (cb: () => void): void => {\r\n    this.ctx.save()\r\n    cb()\r\n    this.ctx.restore()\r\n  }\r\n\r\n  protected drawPath = (cb: () => void): void => {\r\n    this.ctx.beginPath()\r\n    cb()\r\n    this.ctx.closePath()\r\n  }\r\n\r\n  protected clear = (): void => {\r\n    this.save(() => {\r\n      const { width, height } = this.canvas\r\n      this.ctx.translate(0, 0)\r\n      this.ctx.clearRect(0, 0, width, height)\r\n    })\r\n  }\r\n\r\n  private resize = () => {\r\n    this.canvas.height = this.size\r\n    this.canvas.width = this.size\r\n  }\r\n\r\n  public getPresentationElement (onClose: () => void, onRefresh?: () => void): HTMLDivElement {\r\n    const container = createElement('div', { className: 'presentation' })\r\n    const closeBtn = createElement('button', { className: 'close-btn' }) as HTMLButtonElement\r\n    const refreshBtn = createElement('button', { className: 'refresh-btn' }) as HTMLButtonElement\r\n    closeBtn.innerText = '✖'\r\n    refreshBtn.innerText = 'Refresh'\r\n    closeBtn.type = 'button'\r\n    refreshBtn.type = 'button'\r\n    closeBtn.addEventListener('click', onClose)\r\n    refreshBtn.addEventListener('click', (e: MouseEvent) => {\r\n      if (onRefresh) onRefresh()\r\n      this.refresh()\r\n    })\r\n    container.appendChild(closeBtn)\r\n    container.appendChild(this.nameHeading)\r\n    container.appendChild(this.canvas)\r\n    container.appendChild(this.descPara)\r\n    container.appendChild(refreshBtn)\r\n    return container as HTMLDivElement\r\n  }\r\n\r\n  public get thumbnailLi (): HTMLLIElement {\r\n    const image = new Image()\r\n    image.src = this.thumbBackgroundURL\r\n    image.onload = function () {\r\n      li.style.backgroundImage = `url(${image.src})`\r\n    }\r\n    const li = createElement('li', { className: 'project-list-item', data: { id: this.id } }) as HTMLLIElement\r\n    li.style.backgroundOrigin = 'center center'\r\n    li.style.backgroundSize = 'cover'\r\n    li.appendChild(this.thumbNameSpan)\r\n    return li\r\n  }\r\n\r\n  public render (): void {}\r\n\r\n  public get thumbBackgroundURL (): string {\r\n    this.render()\r\n    return this.canvas.toDataURL()\r\n  }\r\n\r\n  public refresh (): void {}\r\n}\r\n","export function randString (len: number = 12): string {\r\n  const { floor, random } = Math\r\n\r\n  const chunk = (): string => {\r\n    const fillChar: string = String.fromCharCode(floor(random() * 26) + 65)\r\n    return random().toString(36).replace(/0\\.|[!@#$%^&*()?<>_|,.+;:\"']+|-+/gi, fillChar)\r\n  }\r\n\r\n  let s: string = chunk()\r\n\r\n  if (s.length < len) {\r\n    while (s.length < len) s += chunk()\r\n  }\r\n\r\n  return s.slice(0, len)\r\n}\r\n","import { Project, ProjectType } from '.'\r\nimport { createElement } from '..'\r\n\r\nexport abstract class StaticProject extends Project {\r\n  public type: ProjectType = ProjectType.STATIC\r\n\r\n  public override render (): void {}\r\n\r\n  public override refresh (): void {}\r\n}\r\n","export type Position = [number, number]\r\nexport type Dir = -1|1\r\nexport abstract class Shape {\r\n  public angle: number = (Math.random() * 6)\r\n  public opacity: number = Math.random()\r\n  public lineWidth: number = (Math.random() * 8)\r\n\r\n  constructor (\r\n    public x: number,\r\n    public y: number\r\n  ) {}\r\n\r\n  public get points (): Position[] {\r\n    return [[0, 0]]\r\n  }\r\n\r\n  public getLinePoints = (offset: number): Position[] => {\r\n    return this.points.map((point: Position) => this.offsetPoint(point[0], point[1], offset))\r\n  }\r\n\r\n  protected offsetPoint = (x: number, y: number, offset: number): Position => {\r\n    const { round, random } = Math\r\n    const DIRS: Dir[] = [-1, 1]\r\n    const xDir: Dir = DIRS[round(random())]\r\n    const yDir: Dir = DIRS[round(random())]\r\n    return [(x * (xDir * (random() * offset))), (y * (yDir * (random() * offset)))]\r\n  }\r\n}\r\n","import { Shape } from './Shape'\r\n\r\nexport type RoundShapeType = 'ellipse'|'circle'\r\n\r\nexport abstract class RoundShape extends Shape {\r\n  public type!: RoundShapeType\r\n\r\n  constructor (\r\n    x: number,\r\n    y: number,\r\n    public radius: number\r\n  ) {\r\n    super(x, y)\r\n  }\r\n}\r\n","import { RoundShape, RoundShapeType } from './RoundShape'\r\nimport { Position } from './Shape'\r\n\r\nexport class Circle extends RoundShape {\r\n  public type: RoundShapeType = 'circle'\r\n\r\n  constructor (\r\n    x: number,\r\n    y: number,\r\n    radius: number,\r\n    public color: string\r\n  ) { super(x, y, radius) }\r\n\r\n  get points (): Position[] {\r\n    const { cos, sin } = Math\r\n    const points: Position[] = []\r\n    for (let i = 0; i < 6; i += 1) {\r\n      const x: number = cos(i) * this.radius\r\n      const y: number = sin(i) * this.radius\r\n      points.push([x, y])\r\n    }\r\n\r\n    return points\r\n  }\r\n}\r\n","import { RoundShape, RoundShapeType } from './RoundShape'\r\nimport { Position } from './Shape'\r\n\r\nexport class Ellipse extends RoundShape {\r\n  public type: RoundShapeType = 'ellipse'\r\n\r\n  constructor (\r\n    x: number,\r\n    y: number,\r\n    radius: number,\r\n    public yRadius: number,\r\n    public color: string\r\n  ) {\r\n    super(x, y, radius)\r\n  }\r\n\r\n  get points (): Position[] {\r\n    const { cos, sin } = Math\r\n    const points: Position[] = []\r\n    for (let i = 0; i < 6; i += 1) {\r\n      const x: number = cos(i) * this.radius\r\n      const y: number = sin(i) * this.yRadius\r\n      points.push([x, y])\r\n    }\r\n\r\n    return points\r\n  }\r\n}\r\n","import { Position, Shape } from './Shape'\r\n\r\nexport type RectShapeType = 'rect'|'square'\r\n\r\nexport abstract class RectShape extends Shape {\r\n  public type!: RectShapeType\r\n  constructor (\r\n    x: number,\r\n    y: number,\r\n    public width: number,\r\n    public height: number\r\n  ) {\r\n    super(x, y)\r\n  }\r\n\r\n  public get points (): Position[] {\r\n    const cx: number = this.width / 2\r\n    const cy: number = this.height / 2\r\n    return [\r\n      [-cx, -cy],\r\n      [cx, -cy],\r\n      [cx, cy],\r\n      [-cx, cy]\r\n    ]\r\n  }\r\n}\r\n","import { RectShape, RectShapeType } from './RectShape'\r\n\r\nexport class Rect extends RectShape {\r\n  public type: RectShapeType = 'rect'\r\n\r\n  constructor (\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n    public color: string\r\n  ) { super(x, y, width, height) }\r\n}\r\n","import { RectShape, RectShapeType } from './RectShape'\r\n\r\nexport class Square extends RectShape {\r\n  public type: RectShapeType = 'square'\r\n  constructor (\r\n    x: number,\r\n    y: number,\r\n    size: number,\r\n    public color: string\r\n  ) {\r\n    super(x, y, size, size)\r\n  }\r\n}\r\n","import { StaticProject } from '../../lib/Project'\r\n\r\nclass Walls {\r\n  public top: boolean = true\r\n  public right: boolean = true\r\n  public bottom: boolean = true\r\n  public left: boolean = false\r\n}\r\n\r\nclass Cell {\r\n  public walls: Walls = new Walls()\r\n  public visited: boolean = false\r\n  constructor (public x: number, public y: number) {}\r\n}\r\n\r\nexport default class BasicMaze extends StaticProject {\r\n  public data: Cell[][] = []\r\n  private _current: Cell|null = null\r\n  public rows: number = 30\r\n  public cellMargin: number = 0\r\n\r\n  constructor () {\r\n    super({\r\n      name: 'Basic Maze',\r\n      desc: 'A Simple Maze (without exits)'\r\n    })\r\n    this.onCreate()\r\n    this.render()\r\n  }\r\n\r\n  private populate = () => {\r\n    for (let y = 0; y < this.rows; y += 1) {\r\n      const row: Cell[] = []\r\n      for (let x = 0; x < this.rows; x += 1) {\r\n        row.push(new Cell(x, y))\r\n      }\r\n      this.data.push(row)\r\n    }\r\n  }\r\n\r\n  public onCreate () {\r\n    if (this.data) {\r\n      this.populate()\r\n      this.breakAllWalls()\r\n    }\r\n  }\r\n\r\n  public pickRandomNeighbor = (x: number, y: number): Cell => {\r\n    const { floor, random } = Math\r\n    const origins = [\r\n      [x, y - 1],\r\n      [x - 1, y], [x + 1, y],\r\n      [x, y + 1]\r\n    ]\r\n\r\n    const neighbors: Cell[] = []\r\n\r\n    for (const o of origins) {\r\n      if (this.data[o[1]] && this.data[o[1]][o[0]]) neighbors.push(this.data[o[1]][o[0]])\r\n    }\r\n\r\n    const ri: number = floor(random() * neighbors.length)\r\n\r\n    return neighbors[ri]\r\n  }\r\n\r\n  public get unvisited (): boolean {\r\n    const unvisited = this.data\r\n      .reduce((a: Cell[], b: Cell[]) => a.concat(b))\r\n      .filter((cell: Cell) => cell.visited === false)\r\n\r\n    return unvisited.length > 0\r\n  }\r\n\r\n  private removeWalls = (cell: Cell) => {\r\n    const { x, y } = this._current as Cell\r\n    if (cell.x < x) {\r\n      cell.walls.right = false;\r\n      (this._current as Cell).walls.left = false\r\n    }\r\n\r\n    if (cell.x > x) {\r\n      cell.walls.left = false;\r\n      (this._current as Cell).walls.right = false\r\n    }\r\n\r\n    if (cell.y < y) {\r\n      cell.walls.bottom = false;\r\n      (this._current as Cell).walls.top = false\r\n    }\r\n\r\n    if (cell.y > y) {\r\n      cell.walls.top = false;\r\n      (this._current as Cell).walls.bottom = false\r\n    }\r\n  }\r\n\r\n  public breakAllWalls = () => {\r\n    this._current = this.data[0][0]\r\n    let unvisited = this.unvisited\r\n    while (unvisited) {\r\n      const random = this.pickRandomNeighbor(this._current.x, this._current.y)\r\n      if (random.visited === false) {\r\n        this.removeWalls(random)\r\n        random.visited = true\r\n      }\r\n      this._current = random\r\n      unvisited = this.unvisited\r\n    }\r\n  }\r\n\r\n  public get cellSize (): number { return this.size / this.rows }\r\n\r\n  private renderWalls = (cell: Cell) => {\r\n    const renderTop = () => {\r\n      this.save(() => {\r\n        this.ctx.translate(cell.x * this.cellSize, cell.y * this.cellSize)\r\n        this.drawPath(() => {\r\n          this.ctx.moveTo(0, 0)\r\n          this.ctx.lineTo(this.cellSize, 0)\r\n          this.ctx.stroke()\r\n        })\r\n      })\r\n    }\r\n\r\n    const renderRight = () => {\r\n      this.save(() => {\r\n        this.ctx.translate(cell.x * this.cellSize, cell.y * this.cellSize)\r\n        this.drawPath(() => {\r\n          this.ctx.moveTo(this.cellSize, 0)\r\n          this.ctx.lineTo(this.cellSize, this.cellSize)\r\n          this.ctx.stroke()\r\n        })\r\n      })\r\n    }\r\n    const renderBottom = () => {\r\n      this.save(() => {\r\n        this.ctx.translate(cell.x * this.cellSize, cell.y * this.cellSize)\r\n        this.drawPath(() => {\r\n          this.ctx.moveTo(this.cellSize, this.cellSize)\r\n          this.ctx.lineTo(0, this.cellSize)\r\n          this.ctx.stroke()\r\n        })\r\n      })\r\n    }\r\n    const renderleft = () => {\r\n      this.save(() => {\r\n        this.ctx.translate(cell.x * this.cellSize, cell.y * this.cellSize)\r\n        this.drawPath(() => {\r\n          this.ctx.moveTo(0, this.cellSize)\r\n          this.ctx.lineTo(0, 0)\r\n          this.ctx.stroke()\r\n        })\r\n      })\r\n    }\r\n    this.ctx.strokeStyle = this.colors.purple\r\n    if (cell.walls.top) renderTop()\r\n    if (cell.walls.right) renderRight()\r\n    if (cell.walls.bottom) renderBottom()\r\n    if (cell.walls.left) renderleft()\r\n  }\r\n\r\n  public override render (): void {\r\n    this.clear()\r\n    if (this.data) {\r\n      this.data.forEach((row: Cell[]) => {\r\n        row.forEach(this.renderWalls)\r\n      })\r\n    }\r\n  }\r\n\r\n  public override refresh (): void {\r\n    this.data = []\r\n    this.onCreate()\r\n    this.render()\r\n  }\r\n}\r\n","import { Project, ProjectType } from '.'\r\nimport { createElement } from '..'\r\n\r\nexport abstract class AnimProject extends Project {\r\n  private _isRunning: boolean = false\r\n  private _handle: null|number = null\r\n  public type: ProjectType = ProjectType.ANIM\r\n\r\n  public override render (): void {}\r\n\r\n  public onStart (): void {}\r\n  public onStop (): void {}\r\n  public onAnimate (): void {}\r\n  public start (): void {\r\n    this._isRunning = true\r\n    this.onStart()\r\n    this._handle = requestAnimationFrame(this.animate)\r\n  }\r\n\r\n  public animate = () => {\r\n    this.clear()\r\n    this.onAnimate()\r\n    this.render()\r\n    if (this._isRunning) requestAnimationFrame(this.animate)\r\n  }\r\n\r\n  public stop (): void {\r\n    this._isRunning = false\r\n    this.onStop()\r\n    if (this._handle) cancelAnimationFrame(this._handle)\r\n    this._handle = null\r\n  }\r\n\r\n  public getPresentationElement (onClose: () => void): HTMLDivElement {\r\n    const container = createElement('div', { className: 'presentation' })\r\n    const closeBtn = createElement('button', { className: 'close-btn' }) as HTMLButtonElement\r\n    const startBtn = createElement('button', { className: 'start-btn' }) as HTMLButtonElement\r\n    closeBtn.innerText = '✖'\r\n    startBtn.innerText = 'start'\r\n    closeBtn.type = 'button'\r\n    startBtn.type = 'button'\r\n    closeBtn.addEventListener('click', onClose)\r\n    startBtn.addEventListener('click', (e: MouseEvent) => {\r\n      if (this._isRunning) {\r\n        this.stop()\r\n        startBtn.innerText = 'Start'\r\n      } else {\r\n        this.start()\r\n        startBtn.innerText = 'Stop'\r\n      }\r\n    })\r\n    container.appendChild(closeBtn)\r\n    container.appendChild(this.nameHeading)\r\n    container.appendChild(this.canvas)\r\n    container.appendChild(this.descPara)\r\n    container.appendChild(startBtn)\r\n    return container as HTMLDivElement\r\n  }\r\n}\r\n","import { AnimProject } from '../../lib/Project/AnimProject'\r\n\r\nclass Bubble {\r\n  public maxRadius: number = 8\r\n  public radius: number = 1\r\n  public speed: number = (Math.random() * 0.1) + 0.1\r\n  public maxSpeed: number = (4 * Math.random()) + 2\r\n  constructor (\r\n    public x: number,\r\n    public y: number\r\n  ) {}\r\n}\r\n\r\nexport default class Carbination extends AnimProject {\r\n  public data: Bubble[] = []\r\n  constructor () {\r\n    super({\r\n      name: 'Carbination',\r\n      desc: 'Carbination effect'\r\n    })\r\n    this.createBubbles(256)\r\n  }\r\n\r\n  private createBubbles = (count: number = 64) => {\r\n    const { round, random } = Math\r\n    const y: number = this.size + 16\r\n    for (let i = 0; i < count; i += 1) {\r\n      const x: number = (random() * (this.size - 16)) + 8\r\n      const dir: -1|1 = [-1, 1][round(random())] as -1|1\r\n      const offset: number = random() * 8\r\n      this.data.push(new Bubble(x, y + (offset * dir)))\r\n    }\r\n  }\r\n\r\n  public override onAnimate (): void {\r\n    if (this.data) {\r\n      this.data.forEach((bubble: Bubble, i: number) => {\r\n        const { radius, maxRadius, y } = bubble\r\n        if (y <= -8) this.data.splice(i, 1)\r\n        else {\r\n          if (radius < maxRadius) bubble.radius += 0.025\r\n          if (bubble.speed < bubble.maxSpeed) bubble.speed += (bubble.speed / 10)\r\n          bubble.y -= bubble.speed\r\n        }\r\n      })\r\n\r\n      if (this.data.length < 464) this.createBubbles()\r\n    }\r\n  }\r\n\r\n  public override render (): void {\r\n    const renderBackground = () => {\r\n      this.save(() => {\r\n        this.ctx.fillStyle = this.colors.baseBlack\r\n        this.drawPath(() => this.ctx.fillRect(0, 0, this.size, this.size))\r\n      })\r\n    }\r\n\r\n    const renderBubbles = () => {\r\n      if (this.data) {\r\n        this.data.forEach((bubble: Bubble) => {\r\n          const { x, y, radius } = bubble\r\n          this.save(() => {\r\n            this.ctx.globalAlpha = 0.4\r\n            this.ctx.strokeStyle = this.colors.baseWhite\r\n            this.drawPath(() => {\r\n              this.ctx.arc(x, y, radius, 0, Math.PI * 2)\r\n              this.ctx.stroke()\r\n            })\r\n          })\r\n        })\r\n      }\r\n    }\r\n\r\n    renderBackground()\r\n    renderBubbles()\r\n  }\r\n}\r\n","import { Project, ProjectOptions, ProjectType } from '.'\r\nimport { createElement } from '..'\r\n\r\nexport abstract class EventProject extends Project {\r\n  public type: ProjectType = ProjectType.EVENT\r\n\r\n  constructor (options: ProjectOptions) {\r\n    super(options)\r\n    this.canvas.addEventListener('mousemove', this.handleMouseMove)\r\n    this.canvas.addEventListener('mouseup', this.handleMouseUp)\r\n  }\r\n\r\n  public onMouseMove = (e: MouseEvent) => {\r\n\r\n  }\r\n\r\n  public onMouseUp = (e: MouseEvent) => {\r\n\r\n  }\r\n\r\n  private handleMouseMove = (e: MouseEvent) => {\r\n    this.onMouseMove(e)\r\n    this.render()\r\n  }\r\n\r\n  private handleMouseUp = (e: MouseEvent) => {\r\n    this.onMouseUp(e)\r\n    this.render()\r\n  }\r\n\r\n  public override render (): void {}\r\n\r\n  public override refresh (): void {}\r\n\r\n  public getPresentationElement (onClose: () => void, onRefresh?: () => void): HTMLDivElement {\r\n    const container = createElement('div', { className: 'presentation' })\r\n    const closeBtn = createElement('button', { className: 'close-btn' }) as HTMLButtonElement\r\n\r\n    closeBtn.innerText = '✖'\r\n    closeBtn.type = 'button'\r\n    closeBtn.addEventListener('click', onClose)\r\n    container.appendChild(closeBtn)\r\n    container.appendChild(this.nameHeading)\r\n    container.appendChild(this.canvas)\r\n    container.appendChild(this.descPara)\r\n    return container as HTMLDivElement\r\n  }\r\n}\r\n","import { AnimProject } from '../../lib/Project/AnimProject'\r\n\r\nclass Orb {\r\n  private _sx: number = [-1, 1][Math.round(Math.random())]\r\n  private _sy: number = [-1, 1][Math.round(Math.random())]\r\n  constructor (\r\n    public x: number,\r\n    public y: number,\r\n    public z: number,\r\n    public color: string\r\n    ) {}\r\n\r\n    get opacity (): number {\r\n      const value: number = 20 - this.z\r\n      if (value === 0) return 0.1\r\n      return (20 / value) / 3\r\n    }\r\n\r\n    get radius (): number {\r\n      const value: number = 20 - this.z\r\n      if (value === 0) return 2\r\n      return value * 2\r\n    }\r\n\r\n    public get speedX (): number {\r\n      const value: number = 20 - this.z\r\n      const dir: number = this._sx\r\n      return (dir * value) / 5\r\n    }\r\n\r\n    public set speedX (dir: number) {\r\n      this._sx = dir\r\n    }\r\n\r\n    public get speedY (): number {\r\n      const value: number = 20 - this.z\r\n      const dir: number = this._sy\r\n      return (dir * value) / 5\r\n    }\r\n\r\n    public set speedY (dir: number) {\r\n      this._sy = dir\r\n    }\r\n}\r\n\r\nexport default class ObjectVelocity extends AnimProject {\r\n  public data: Orb[] = []\r\n  constructor () {\r\n    super({\r\n      name: 'Object Velocity',\r\n      desc: 'A simple demonstration of object velocity and edge detection'\r\n    })\r\n    this.populate()\r\n  }\r\n\r\n  private populate = () => {\r\n    for (let i = 0; i < 128; i += 1) {\r\n      const x: number = (Math.random() * 210) + 40\r\n      const y: number = (Math.random() * 210) + 40\r\n      const z: number = Math.random() * 20\r\n      this.data.push(new Orb(x, y, z, this.colors.random))\r\n    }\r\n  }\r\n\r\n  public override render (): void {\r\n    this.clear()\r\n    if (this.data) {\r\n      this.data.forEach((orb: Orb) => {\r\n        this.save(() => {\r\n          const { x, y, radius, opacity, color } = orb\r\n          this.ctx.translate(x, y)\r\n          this.ctx.globalAlpha = opacity\r\n          this.drawPath(() => {\r\n            this.ctx.fillStyle = color\r\n            this.ctx.arc(0, 0, radius, 0, Math.PI * 23)\r\n            this.ctx.fill()\r\n          })\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  public override onAnimate (): void {\r\n    this.data.forEach((orb: Orb) => {\r\n      if (orb.x >= this.size) orb.speedX = -1\r\n      if (orb.x <= 0) orb.speedX = 1\r\n      if (orb.y <= 0) orb.speedY = 1\r\n      if (orb.y >= this.size) orb.speedY = -1\r\n\r\n      orb.x += orb.speedX\r\n      orb.y += orb.speedY\r\n    })\r\n  }\r\n}\r\n","import { EventProject } from '../../lib/Project/EventProject'\r\nimport { Position } from './ArtGenerator/Shape'\r\n\r\nclass Bubble {\r\n  public opacity: number = (Math.random() * 0.5) + 0.3\r\n  constructor (\r\n    public x: number,\r\n    public y: number,\r\n    public radius: number,\r\n    public color: string\r\n  ) {}\r\n}\r\n\r\nexport default class PolarSeparation extends EventProject {\r\n  public data: Bubble[] = []\r\n  public cursor: Position = [150, 150]\r\n  public cursorRadius: number = 32\r\n\r\n  constructor () {\r\n    super({\r\n      name: 'Polar Separation',\r\n      desc: 'Move the mouse to move the circles'\r\n    })\r\n    this.generate()\r\n  }\r\n\r\n  private generate = () => {\r\n    for (let i = 0; i < 450; i += 1) {\r\n      const r: number = (Math.random() * 20) + 4\r\n      const x: number = (Math.random() * (300 - r)) + r\r\n      const y: number = (Math.random() * (300 - r)) + r\r\n      this.data.push(new Bubble(x, y, r, this.colors.random))\r\n    }\r\n  }\r\n\r\n  public moveBubbles = () => {\r\n    const { sqrt, abs, pow } = Math\r\n    this.data.forEach((b: Bubble) => {\r\n      const centerDistance: number = sqrt(pow(abs(b.x - this.cursor[0]), 2) + pow(abs(b.y - this.cursor[1]), 2))\r\n      const combinedRadius: number = b.radius + this.cursorRadius\r\n      const bubbleIntersects: boolean = centerDistance < combinedRadius\r\n\r\n      if (bubbleIntersects) {\r\n        const diff: number = combinedRadius - centerDistance\r\n        if (b.x < this.cursor[0]) b.x -= diff\r\n        if (b.x > this.cursor[0]) b.x += diff\r\n        if (b.y < this.cursor[1]) b.y -= diff\r\n        if (b.y > this.cursor[1]) b.y += diff\r\n      }\r\n    })\r\n  }\r\n\r\n  public override render (): void {\r\n    this.clear()\r\n    if (this.data) {\r\n      this.moveBubbles()\r\n      this.data.forEach((b: Bubble) => {\r\n        this.save(() => {\r\n          this.ctx.strokeStyle = b.color\r\n          this.ctx.translate(b.x, b.y)\r\n          this.ctx.globalAlpha = b.opacity\r\n          this.drawPath(() => {\r\n            this.ctx.arc(0, 0, b.radius, 0, Math.PI * 2)\r\n            this.ctx.stroke()\r\n          })\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  public override onMouseMove = (e: MouseEvent) => {\r\n    const { target, clientX, clientY } = e\r\n    const { offsetLeft, offsetTop } = target as HTMLElement\r\n    this.cursor = [clientX - offsetLeft, clientY - offsetTop]\r\n  }\r\n}\r\n","import { AnimProject } from '../../lib/Project/AnimProject'\r\n\r\ntype Position = [number, number]\r\ntype Dir = 0|1|2|3\r\n\r\nfunction randomDir (exclude?: Dir): Dir {\r\n  const { floor, random } = Math\r\n  const dirs: Dir[] = [0, 1, 2, 3]\r\n  if (exclude) dirs.splice(exclude, 1)\r\n  return dirs[floor(random() * 4)] as Dir\r\n}\r\n\r\nexport default class Worm extends AnimProject {\r\n  public rows: number = 30\r\n  public data: Position[] = []\r\n  public dir: Dir = randomDir()\r\n  public cellMargin: number = 1\r\n  public get cellSize (): number { return this.size / this.rows }\r\n\r\n  public get color (): string {\r\n    if (this.dir === 0 || this.dir === 2) return this.colors.green\r\n    return this.colors.purple\r\n  }\r\n\r\n  constructor () {\r\n    super({\r\n      name: 'Worm',\r\n      desc: 'A worm on an infinite board that randomly changes directions'\r\n    })\r\n    this.create()\r\n  }\r\n\r\n  private create = () => {\r\n    const { round } = Math\r\n    const cx: number = round(this.rows / 2)\r\n    const cy: number = round(this.rows / 2)\r\n    const head: Position = [cx, cy]\r\n\r\n    const placeUpwards = () => {\r\n      this.data.push(head)\r\n      for (let i = cy + 1; i < cy + 8; i += 1) {\r\n        this.data.push([cx, i])\r\n      }\r\n    }\r\n\r\n    const placeDownwards = () => {\r\n      this.data.push(head)\r\n      for (let i = cy - 1; i > cy - 8; i -= 1) {\r\n        this.data.push([cx, i])\r\n      }\r\n    }\r\n\r\n    const placeRightwards = () => {\r\n      this.data.push(head)\r\n      for (let i = cx - 1; i > cx - 8; i -= 1) {\r\n        this.data.push([i, cy])\r\n      }\r\n    }\r\n\r\n    const placeLeftwards = () => {\r\n      this.data.push(head)\r\n      for (let i = cx - 1; i < cx + 8; i += 1) {\r\n        this.data.push([i, cy])\r\n      }\r\n    }\r\n\r\n    switch (this.dir) {\r\n      case 0:\r\n        placeUpwards()\r\n        break\r\n      case 1:\r\n        placeRightwards()\r\n        break\r\n      case 2:\r\n        placeDownwards()\r\n        break\r\n      case 3:\r\n        placeLeftwards()\r\n        break\r\n      default: placeRightwards()\r\n    }\r\n  }\r\n\r\n  public override render (): void {\r\n    this.clear()\r\n    if (this.data) {\r\n      const renderCells = () => {\r\n        for (let y = 0; y < this.rows; y += 1) {\r\n          for (let x = 0; x < this.rows; x += 1) {\r\n            this.save(() => {\r\n              this.ctx.translate(x * this.cellSize, y * this.cellSize)\r\n              this.drawPath(() => {\r\n                this.ctx.lineWidth = 0.25\r\n                const m: number = this.cellMargin\r\n                const s: number = this.cellSize - (m * 2)\r\n                this.ctx.strokeStyle = this.colors.grey75\r\n                this.ctx.strokeRect(m, m, s, s)\r\n              })\r\n            })\r\n          }\r\n        }\r\n      }\r\n      const renderWorm = () => {\r\n        if (this.data) {\r\n          this.data.forEach((cell: Position) => {\r\n            this.save(() => {\r\n              this.ctx.fillStyle = this.color\r\n              this.drawPath(() => {\r\n                const [x, y] = cell\r\n                this.ctx.fillRect(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize)\r\n              })\r\n            })\r\n          })\r\n        }\r\n      }\r\n\r\n      renderCells()\r\n      renderWorm()\r\n    }\r\n  }\r\n\r\n  public override onAnimate (): void {\r\n    if (Math.random() < 0.05) this.dir = randomDir(this.dir)\r\n    const handleUp = () => {\r\n      const newHead = [...this.data[0]]\r\n      if (newHead[1] === 0) {\r\n        newHead[1] = this.rows - 1\r\n      } else {\r\n        newHead[1] = newHead[1] - 1\r\n      }\r\n      this.data.pop()\r\n      this.data.unshift(newHead as Position)\r\n    }\r\n\r\n    const handleDown = () => {\r\n      const newHead = [...this.data[0]]\r\n      if (newHead[1] === this.rows - 1) {\r\n        newHead[1] = 0\r\n      } else {\r\n        newHead[1] = newHead[1] + 1\r\n      }\r\n\r\n      this.data.pop()\r\n      this.data.unshift(newHead as Position)\r\n    }\r\n\r\n    const handleRight = () => {\r\n      const newHead = [...this.data[0]]\r\n      if (newHead[0] === this.rows - 1) {\r\n        newHead[0] = 0\r\n      } else {\r\n        newHead[0] = newHead[0] + 1\r\n      }\r\n      this.data.pop()\r\n      this.data.unshift(newHead as Position)\r\n    }\r\n\r\n    const handleLeft = () => {\r\n      const newHead = [...this.data[0]]\r\n      if (newHead[0] === 0) {\r\n        newHead[0] = this.rows - 1\r\n      } else {\r\n        newHead[0] = newHead[0] - 1\r\n      }\r\n      this.data.pop()\r\n      this.data.unshift(newHead as Position)\r\n    }\r\n\r\n    if (this.data) {\r\n      switch (this.dir) {\r\n        case 0:\r\n          handleUp()\r\n          break\r\n        case 1:\r\n          handleRight()\r\n          break\r\n        case 2:\r\n          handleDown()\r\n          break\r\n        case 3:\r\n          handleLeft()\r\n          break\r\n        default: handleRight()\r\n      }\r\n    }\r\n  }\r\n}\r\n","import ArtGenerator from './ArtGenerator'\r\nimport BasicMaze from './BasicMaze'\r\nimport Carbination from './Carbination'\r\nimport { GOL } from './GOL'\r\nimport LineMap from './LineMap'\r\nimport ObjectVelocity from './ObjectVelocity'\r\nimport PolarSeparation from './PolarSeparation'\r\nimport Worm from './Worm'\r\n\r\nconst basicMaze = new BasicMaze()\r\nconst gol = new GOL()\r\nconst ov = new ObjectVelocity()\r\nconst lineMap = new LineMap()\r\nconst worm: Worm = new Worm()\r\nconst carbination: Carbination = new Carbination()\r\nconst polarSeparation: PolarSeparation = new PolarSeparation()\r\nconst artGen: ArtGenerator = new ArtGenerator()\r\n\r\nbasicMaze.render()\r\ngol.render()\r\nov.render()\r\nlineMap.render()\r\nworm.render()\r\nartGen.render()\r\npolarSeparation.render()\r\nexport default [\r\n  basicMaze,\r\n  gol,\r\n  ov,\r\n  lineMap,\r\n  worm,\r\n  carbination,\r\n  polarSeparation,\r\n  artGen\r\n]\r\n","import { AnimProject } from '../../lib/Project/AnimProject'\r\n\r\nexport class GOL extends AnimProject {\r\n  private data: number[][] = []\r\n  private _prob: number = 0.27\r\n  public rows: number = 30\r\n  public cellMargin: number = 1\r\n\r\n  constructor () {\r\n    super({\r\n      name: 'Game of Life',\r\n      desc: 'Conway\\'s Game of Life on an infinite board'\r\n    })\r\n    this.create()\r\n  }\r\n\r\n  private create (): void {\r\n    for (let y = 0; y < this.rows; y += 1) {\r\n      const row: number[] = []\r\n      for (let x = 0; x < this.rows; x += 1) {\r\n        const alive: boolean = Math.random() < this._prob\r\n        row.push(alive ? 1 : 0)\r\n      }\r\n      this.data.push(row)\r\n    }\r\n  }\r\n\r\n  public get renderData (): Uint8ClampedArray[] {\r\n    return this.data.map((r: number[]) => new Uint8ClampedArray(r))\r\n  }\r\n\r\n  public get cellSize (): number {\r\n    return this.size / this.rows\r\n  }\r\n\r\n  private getNeighborCount = (x: number, y: number, data: Uint8ClampedArray[]): number => {\r\n    const origins = [\r\n      [x - 1, y - 1], [x, y - 1], [x + 1, y - 1],\r\n      [x - 1, y], [x + 1, y],\r\n      [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]\r\n    ]\r\n\r\n    let count: number = 0\r\n    for (const o of origins) {\r\n      if (o[1] < 0) o[1] = this.rows + o[1]\r\n      if (o[1] >= this.rows) o[1] = this.rows - o[1]\r\n      if (o[0] < 0) o[0] = this.rows + o[0]\r\n      if (o[0] >= this.rows) o[0] = this.rows - o[0]\r\n\r\n      if (data[o[1]][o[0]]) count += 1\r\n    }\r\n\r\n    return count\r\n  }\r\n\r\n  public override onAnimate (): void {\r\n    if (this.data) {\r\n      const data = this.renderData\r\n      data.forEach((row: Uint8ClampedArray, y: number) => {\r\n        row.forEach((val: number, x: number) => {\r\n          const count: number = this.getNeighborCount(x, y, data)\r\n          if (\r\n            (val && (count >= 2 && count <= 3)) ||\r\n            (!val && count === 3)\r\n            ) this.data[y][x] = 1\r\n            else this.data[y][x] = 0\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  public override render (): void {\r\n    if (this.data) {\r\n      const data = this.renderData\r\n      data.forEach((row: Uint8ClampedArray, y: number) => {\r\n        row.forEach((val: number, x: number) => {\r\n          if (val) {\r\n            this.save(() => {\r\n              this.ctx.translate(x * this.cellSize, y * this.cellSize)\r\n              this.drawPath(() => {\r\n                const m: number = this.cellMargin\r\n                const s: number = this.cellSize - (m * 2)\r\n                this.ctx.fillStyle = this.colors.green\r\n                this.ctx.fillRect(m, m, s, s)\r\n              })\r\n            })\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { EventProject } from '../../lib/Project/EventProject'\r\n\r\ntype Mouse = [number, number]\r\n\r\nexport default class LineMap extends EventProject {\r\n  private _mouse: Mouse = [150, 150]\r\n\r\n  private lines: [number, number, string][] = []\r\n  constructor () {\r\n    super({\r\n      name: 'Line Map',\r\n      desc: 'Move the mouse to move the lines'\r\n    })\r\n    this.create()\r\n  }\r\n\r\n  private create = () => {\r\n    for (let i = 0; i < this.size; i += 10) {\r\n      const color: string = this.colors.random\r\n      this.lines.push([0, i, color])\r\n      this.lines.push([i, 0, color])\r\n      this.lines.push([this.size, i, color])\r\n      this.lines.push([i, this.size, color])\r\n    }\r\n    this.lines.push([300, 300, this.colors.purple])\r\n  }\r\n\r\n  public override onMouseMove = (e: MouseEvent) => {\r\n    const target = e.target as HTMLElement\r\n    const x: number = e.clientX - target.offsetLeft\r\n    const y: number = e.clientY - target.offsetTop\r\n    this._mouse = [x, y]\r\n  }\r\n\r\n  public override render (): void {\r\n    this.clear()\r\n    if (this.lines) {\r\n      this.lines.forEach((line: [number, number, string]) => {\r\n        this.save(() => {\r\n          this.drawPath(() => {\r\n            const [x, y, color] = line\r\n            this.ctx.lineWidth = 1\r\n            this.ctx.strokeStyle = color\r\n            this.ctx.moveTo(x, y)\r\n            this.ctx.lineTo(this._mouse[0], this._mouse[1])\r\n            this.ctx.stroke()\r\n          })\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { StaticProject } from '../../../lib'\r\nimport { Circle } from './Circle'\r\nimport { Ellipse } from './Ellipse'\r\nimport { Rect } from './Rect'\r\nimport { Position } from './Shape'\r\nimport { Square } from './Square'\r\n\r\ninterface ArtGeneratorOptions {\r\n  shapeCount: number\r\n  maxShapeSize: number\r\n  lineOffset: number\r\n  height: number\r\n  width: number\r\n}\r\n\r\ninterface ArtGeneratorParams extends ArtGeneratorOptions {\r\n  generate: () => void\r\n  render: () => void\r\n}\r\n\r\ntype ArtGeneratorShape = Circle|Ellipse|Square|Rect\r\n\r\nconst desc: string = 'Generates abstract art based on basic shapes, opacities, colors, and lines. The lines are randomly offset from the shapes points'\r\n\r\nexport default class ArtGenerator extends StaticProject implements ArtGeneratorParams {\r\n  public shapeCount: number = 255\r\n  public maxShapeSize: number = 75\r\n  public lineOffset: number = 2\r\n  public data: ArtGeneratorShape[] = []\r\n\r\n  public get width (): number { return this.size }\r\n\r\n  public get height (): number { return this.size }\r\n\r\n  constructor (options?: Partial<ArtGeneratorOptions>) {\r\n    super({\r\n      name: 'Abstract Art Generator',\r\n      desc\r\n\r\n    })\r\n    if (options) Object.assign(this, options)\r\n    this.generate()\r\n    this.render()\r\n  }\r\n\r\n  public generate (): void {\r\n    const { floor, random } = Math\r\n    for (let i = 0; i < this.shapeCount; i += 1) {\r\n      const types: string[] = ['circle', 'square', 'rect', 'ellipse']\r\n      const ri: number = floor(random() * 4)\r\n      let shape: ArtGeneratorShape\r\n      const size: number = random() * this.maxShapeSize\r\n      const secondarySize: number = random() * this.maxShapeSize\r\n      const x: number = random() * this.size\r\n      const y: number = random() * this.size\r\n\r\n      switch (types[ri]) {\r\n        case 'circle':\r\n          shape = new Circle(x, y, (size / 2), this.colors.random)\r\n          break\r\n        case 'square':\r\n          shape = new Square(x, y, size, this.colors.random)\r\n          break\r\n        case 'rect':\r\n          shape = new Rect(x, y, size, secondarySize, this.colors.random)\r\n          break\r\n        case 'ellipse':\r\n          shape = new Ellipse(x, y, size / 2, secondarySize / 2, this.colors.random)\r\n          break\r\n          default: shape = new Ellipse(x, y, size / 2, secondarySize / 2, this.colors.random)\r\n      }\r\n\r\n      this.data.push(shape)\r\n    }\r\n  }\r\n\r\n  public override render (): void {\r\n    if (this.data) {\r\n      this.data.forEach((shape: ArtGeneratorShape) => {\r\n        const { x, y, type, angle, color, points } = shape\r\n\r\n        const renderRect = () => {\r\n          this.save(() => {\r\n            this.ctx.translate(x, y)\r\n            this.ctx.rotate(angle)\r\n            this.ctx.fillStyle = color\r\n            this.ctx.strokeStyle = this.colors.random\r\n\r\n            this.drawPath(() => {\r\n              this.ctx.globalAlpha = shape.opacity\r\n              const { height, width } = shape as Square\r\n              this.ctx.fillRect(...points[0], width, height)\r\n            })\r\n          })\r\n\r\n          this.save(() => {\r\n            this.ctx.translate(x, y)\r\n            this.ctx.rotate(angle)\r\n            this.ctx.strokeStyle = this.colors.grey75\r\n            this.drawPath(() => {\r\n              const points = shape.getLinePoints(this.lineOffset)\r\n              this.ctx.globalAlpha = 0.9\r\n              points.forEach((point: Position, i: number) => {\r\n                this.ctx.moveTo(...point)\r\n                if (i === points.length - 1) this.ctx.lineTo(...points[0])\r\n                else this.ctx.lineTo(...points[i + 1])\r\n                this.ctx.stroke()\r\n              })\r\n            })\r\n          })\r\n        }\r\n\r\n        const renderRound = () => {\r\n          this.save(() => {\r\n            this.ctx.translate(x, y)\r\n            this.ctx.rotate(angle)\r\n\r\n            this.ctx.fillStyle = color\r\n            this.ctx.globalAlpha = shape.opacity\r\n\r\n            this.drawPath(() => {\r\n              if (shape.type === 'circle') this.ctx.arc(0, 0, shape.radius, 0, Math.PI * 2)\r\n              else if (shape.type === 'ellipse') this.ctx.ellipse(0, 0, shape.radius, (shape as Ellipse).yRadius, 0, 0, Math.PI * 2)\r\n              this.ctx.fill()\r\n            })\r\n          })\r\n\r\n          this.save(() => {\r\n            this.ctx.translate(x, y)\r\n            this.ctx.rotate(angle)\r\n            this.ctx.strokeStyle = this.colors.grey25\r\n\r\n            this.drawPath(() => {\r\n              const points = shape.getLinePoints(this.lineOffset)\r\n\r\n              points.forEach((point: Position, i: number) => {\r\n                this.ctx.moveTo(...point)\r\n                this.ctx.globalAlpha = 0.9\r\n                if (i === points.length - 1) this.ctx.lineTo(...points[0])\r\n                else this.ctx.lineTo(...points[i + 1])\r\n                this.ctx.stroke()\r\n              })\r\n              this.ctx.closePath()\r\n            })\r\n          })\r\n        }\r\n\r\n        if (type === 'square' || type === 'rect') renderRect()\r\n        else renderRound()\r\n      })\r\n    }\r\n  }\r\n\r\n  public override refresh (): void {\r\n    this.data = []\r\n    this.generate()\r\n    this.render()\r\n  }\r\n}\r\n","/* eslint-disable dot-notation */\r\nimport Application from '../lib/Application'\r\nimport projects from './projects'\r\n\r\nconst root: HTMLDivElement = document.getElementById('root') as HTMLDivElement\r\nconst content: HTMLDivElement = document.getElementById('content') as HTMLDivElement\r\nconst modal: HTMLDivElement = document.getElementById('modal') as HTMLDivElement\r\nconst app: Application = new Application(root, content, modal, projects)\r\n","import { createElement } from '..'\r\nimport { Project, ProjectType } from '../Project'\r\n\r\nexport default class Application {\r\n  public _activeProjectId: string|null = null\r\n  public listEl!: HTMLUListElement\r\n  constructor (\r\n    public rootEl: HTMLElement,\r\n    public contentEl: HTMLElement,\r\n    public modalEl: HTMLElement,\r\n    public projects: Project[]\r\n  ) {\r\n    this.listEl = createElement('ul', { className: 'project-list' }) as HTMLUListElement\r\n    this.populateList()\r\n    this.listEl.addEventListener('click', this.handleListClick)\r\n    this.contentEl.appendChild(this.listEl)\r\n  }\r\n\r\n  private populateList = () => {\r\n    this.projects.forEach((proj: Project) => this.listEl.appendChild(proj.thumbnailLi))\r\n  }\r\n\r\n  private handleListClick = (e: MouseEvent) => {\r\n    const { dataset } = e.target as HTMLElement\r\n    if (dataset && dataset.id) this._activeProjectId = dataset.id\r\n    else this._activeProjectId = null\r\n    this.toggleViewport()\r\n    if (this._activeProjectId) {\r\n      const project = this.projects.filter((p: Project) => p.id === this._activeProjectId)[0] as Project\r\n      this.modalEl.innerHTML = ''\r\n      this.modalEl.appendChild(project.getPresentationElement(() => {\r\n        this._activeProjectId = null\r\n        this.toggleViewport()\r\n      }, () => {\r\n        project.refresh()\r\n      }))\r\n    }\r\n  }\r\n\r\n  public toggleViewport (): void {\r\n    if (this._activeProjectId) {\r\n      if (this.modalEl.classList.contains('closed')) this.modalEl.classList.remove('closed')\r\n      if (!this.rootEl.classList.contains('blurred')) this.rootEl.classList.add('blurred')\r\n    } else {\r\n      if (!this.modalEl.classList.contains('closed')) this.modalEl.classList.add('closed')\r\n      if (this.rootEl.classList.contains('blurred')) this.rootEl.classList.remove('blurred')\r\n    }\r\n  }\r\n}\r\n"],"names":["$d0bdca8b306aed0e$export$c8a8987d4410bf2d","tag","options","el","document","createElement","className","id","data","Object","assign","dataset","classList","add","$55814014af455215$export$2e2bcd8739ae039","random","this","green","purple","Math","round","baseBlack","grey25","grey50","grey75","baseWhite","ProjectType","$36aee7e70f072a52$export$39284f7325536558","$36aee7e70f072a52$export$b6032183171af19f","len","floor","chunk","fillChar","String","fromCharCode","toString","replace","s","length","slice","$afa39c8e10a51712$export$469967246971e2a9","colors","canvas","ctx","getContext","size","createThumbNameSpan","span","innerText","name","createNameHeading","title","createDescPara","p","desc","save","cb","restore","drawPath","beginPath","closePath","clear","width","height","translate","clearRect","resize","thumbNameSpan","descPara","nameHeading","render","getPresentationElement","onClose","onRefresh","container","closeBtn","refreshBtn","type","addEventListener","e","refresh","appendChild","thumbnailLi","image","Image","src","thumbBackgroundURL","onload","li","style","backgroundImage","backgroundOrigin","backgroundSize","toDataURL","$9b966cfaa62e1543$export$a0ff8750fb7abc96","STATIC","$c116af4b5858e8c2$export$6428a7f2611ef1fa","x","y","angle","opacity","lineWidth","getLinePoints","offset","points","map","point","offsetPoint","DIRS","xDir","yDir","$5654d41660d2340e$export$268467661e236171","radius","super","$d56acba59e65420b$export$c89a927ffc67e6fa","color","cos","sin","i","push","$2eb20c2382aa6b68$export$80b0269ab108fa11","yRadius","$4b3c3cff753e2bf2$export$51140d6b71bb4ed5","cx","cy","$b42b27e1e00ebeb6$export$c79fc6492f3af13d","$0de07a4d36548fd8$export$b09fb900337259de","$c2dd9c63085241b1$var$Walls","top","right","bottom","left","$c2dd9c63085241b1$var$Cell","walls","visited","$3d3fe3651416bd92$export$3eeb8e673ba2e749","onStart","onStop","onAnimate","start","_isRunning","_handle","requestAnimationFrame","animate","stop","cancelAnimationFrame","startBtn","ANIM","$3dbcf72be4a54d52$var$Bubble","maxRadius","speed","maxSpeed","$49a08201bb652b12$export$c1b11e36f443ad3c","EVENT","onMouseMove","onMouseUp","handleMouseMove","handleMouseUp","$44c6325420574451$var$Orb","z","_sx","_sy","value","speedX","dir","speedY","$4ea2bccd5f97a34c$var$Bubble","$b9f918a23b87be7a$var$randomDir","exclude","dirs","splice","$7fcf38e7c34d74d0$var$basicMaze","_current","rows","cellMargin","populate","row","pickRandomNeighbor","origins","neighbors","o","removeWalls","cell","breakAllWalls","unvisited","renderWalls","strokeStyle","cellSize","moveTo","lineTo","stroke","renderTop","renderRight","renderBottom","renderleft","onCreate","reduce","a","b","concat","filter","forEach","$7fcf38e7c34d74d0$var$gol","_prob","getNeighborCount","count","create","alive","renderData","r","Uint8ClampedArray","val","m","fillStyle","fillRect","$7fcf38e7c34d74d0$var$ov","orb","globalAlpha","arc","PI","fill","$7fcf38e7c34d74d0$var$lineMap","_mouse","lines","target","clientX","offsetLeft","clientY","offsetTop","line","$7fcf38e7c34d74d0$var$worm","head","placeUpwards","placeDownwards","placeRightwards","placeLeftwards","renderWorm","strokeRect","renderCells","handleUp","newHead","pop","unshift","handleDown","handleRight","handleLeft","$7fcf38e7c34d74d0$var$carbination","createBubbles","bubble","renderBackground","renderBubbles","$7fcf38e7c34d74d0$var$polarSeparation","cursor","cursorRadius","generate","moveBubbles","sqrt","abs","pow","centerDistance","combinedRadius","diff","$7fcf38e7c34d74d0$var$artGen","shapeCount","maxShapeSize","lineOffset","types","ri","shape","secondarySize","rotate","renderRect","ellipse","renderRound","$7fcf38e7c34d74d0$export$2e2bcd8739ae039","$c5390370ccc0744d$var$root","getElementById","$c5390370ccc0744d$var$content","$c5390370ccc0744d$var$modal","rootEl","contentEl","modalEl","projects","_activeProjectId","populateList","proj","listEl","handleListClick","toggleViewport","project","innerHTML","contains","remove"],"version":3,"file":"index.f224c9a8.js.map"}